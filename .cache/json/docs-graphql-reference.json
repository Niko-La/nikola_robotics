{"data":{"markdownRemark":{"html":"<p><em>WIP!</em></p>\n<h3 id=\"filters-and-sorting\"><a href=\"#filters-and-sorting\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filters and Sorting</h3>\n<p>Gatsby’s implementation of GraphQL adds support for operators like sorting and filtering when components are fetching data.</p>\n<p>Consider a query to get all blog posts:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>query IndexQuery {\n    allMarkdownRemark {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n          }\n          excerpt\n        }\n      }\n    }\n  }</code></pre>\n      </div>\n<p>Let’s say you want to fetch the most recent 10 posts, ordered by date. Also, you want to exclude any posts with which are marked <code>draft: true</code> in the frontmatter. You can add sort and filter params like so.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>query IndexQuery {\n    allMarkdownRemark(\n      sort: {fields: [frontmatter___date], order: DESC},\n      filter: { frontmatter: { draft: { ne: true } } },\n      limit: 10\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n          }\n          excerpt\n        }\n      }\n    }\n  }</code></pre>\n      </div>\n<p>Gatsby relies on <a href=\"https://www.npmjs.com/package/sift\">sift</a>, enabling MongoDB query syntax for object filtering. This allows Gatsby to support operators like <code>eq</code>, <code>ne</code>, <code>in</code>, <code>regex</code>, querying nested fields through the <code>__</code> connector, and so forth.</p>\n<p>A good video tutorial on this is <a href=\"https://www.youtube.com/watch?v=Lg1bom99uGM\">here</a>.</p>","excerpt":"WIP! Filters and Sorting Gatsby’s implementation of GraphQL adds support for operators like sorting and filtering when components are…","timeToRead":1,"frontmatter":{"title":"GraphQL Reference"},"parent":{"__typename":"File","relativePath":"docs/graphql-reference.md"}}},"pathContext":{"slug":"/docs/graphql-reference/"}}